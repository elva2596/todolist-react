{"version":3,"sources":["Form.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Form","event","preventDefault","text","this","refs","value","trim","_this$props","props","isEdit","currentList","handleEdit","id","uuid","add","alert","_ref","data","filter","item","button","react_default","a","createElement","type","className","onSubmit","handleSubmit","bind","placeholder","ref","Component","List","delete","edit","_this","listItems","map","key","onClick","App","state","newItem","newdata","concat","setState","index","forEach","splice","src_Form","src_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c309a1e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport uuid from 'uuid';\r\nclass Form extends Component {\r\n  handleSubmit(event) {\r\n    event.preventDefault()\r\n    let text = this.refs.text.value\r\n    if (!text.trim()) {\r\n      alert(\"Input can't be null\")\r\n      return\r\n    }\r\n    const {isEdit,currentList} = this.props;\r\n    // when the edit-button is clicked\r\n    if(isEdit && currentList){\r\n      this.props.handleEdit({id:currentList,text})\r\n    }else{\r\n    // when the add-button is clicked\r\n      let id = uuid();\r\n      this.props.add({id, text});\r\n    }\r\n    \r\n    this.refs.text.value = '';\r\n  }\r\n  componentWillReceiveProps({isEdit,currentList}){\r\n    if(isEdit && currentList){\r\n      const value = this.props.data.filter((item) => item.id===currentList)[0]\r\n      this.refs.text.value = value.text\r\n    }else{\r\n      this.refs.text.value = ''\r\n    }\r\n  }\r\n  render() {\r\n    const isEdit =  this.props.isEdit\r\n    let button = null;\r\n    if(isEdit){\r\n      button = <button type='submit' className='add-button'>Edit</button>\r\n    }else{\r\n      button = <button type='submit' className='add-button'>Add</button>\r\n    }\r\n    return (\r\n      <form id='form' onSubmit={this\r\n        .handleSubmit\r\n        .bind(this)}>\r\n        <input type='text' placeholder='TODO' ref='text' className='text-input'/>\r\n        {button}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nclass List extends Component {\r\n  delete(id){\r\n    this.props.delete(id)\r\n  }\r\n\r\n  edit(id){\r\n    this.props.edit(id)\r\n  }\r\n  render() {\r\n    const data = this.props.data;\r\n    const listItems = data.map((item) => {\r\n      return <li key={item.id} className='item'>\r\n                <span className='text'>{item.text}</span>\r\n                <span className='delete' onClick={this.delete.bind(this,item.id)}>delete</span>\r\n                <span className='edit' onClick={this.edit.bind(this,item.id)}>edit</span>\r\n              </li>  \r\n    })\r\n    return (\r\n      <ul className=\"list\">\r\n        {listItems}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\nimport Form from './Form'\nimport List from './List'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    data:[],\n    isEdit:false,\n    currentList:''\n  }\n  \n  add(newItem){\n    let newdata = this.state.data.concat(newItem);\n    this.setState({data : newdata,currentList:''});\n    \n  }\n  // bind click event to handleEdit for top edit-button\n  handleEdit({id,text}){\n    const data =  this.state.data.map((item,index) => {\n      if(item.id===id){\n        return {\n          id:item.id,\n          text\n        }\n      }else{\n        return item\n      }\n    })\n    this.setState({isEdit:false,currentList:'',data})\n  }\n  // bind click event to edit for item-edit\n  edit(id){\n    this.setState({currentList:id,isEdit:true})\n  }\n\n  delete(id){\n    const newdata = this.state.data.concat()\n    this.state.data.forEach((item,index) => {\n      if(item.id===id){\n        newdata.splice(index,1)\n      }\n    })\n    this.setState({data : newdata,isEdit:false,currentList:''});\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>TodoList-React</h1>\n        <Form add={this.add.bind(this)}\n              isEdit={this.state.isEdit}\n              data={this.state.data}\n              currentList={this.state.currentList}\n              handleEdit={this.handleEdit.bind(this)}>\n        </Form>\n        <List data={this.state.data} \n              delete={this.delete.bind(this)}\n              edit={this.edit.bind(this)}>\n        </List>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}